#include "dt.h"
#include <string.h>
#include <assert.h>

#include "benchmark/benchmark.h"
// 180_from_string.t

const char sample[] = "2012-12-24T15:30Z";

const char * tests[] = {
	"2012-12-24 15:30Z",
	"2012-12-24 15:30z",
	"2012-12-24 16:30+01:00",
	"2012-12-24 16:30+0100",
	"2012-12-24 16:30+01",
	"2012-12-24 14:30-01:00",
	"2012-12-24 14:30-0100",
	"2012-12-24 14:30-01",
	"2012-12-24 15:30:00Z",
	"2012-12-24 15:30:00z",
	"2012-12-24 16:30:00+01:00",
	"2012-12-24 16:30:00+0100",
	"2012-12-24 14:30:00-01:00",
	"2012-12-24 14:30:00-0100",
	"2012-12-24 15:30:00.123456Z",
	"2012-12-24 15:30:00.123456z",
	"2012-12-24 16:30:00.123456+01:00",
	"2012-12-24 16:30:00.123456+01",
	"2012-12-24 14:30:00.123456-01:00",
	"2012-12-24 14:30:00.123456-01",
	"2012-12-24t15:30Z",
	"2012-12-24t15:30z",
	"2012-12-24t16:30+01:00",
	"2012-12-24t16:30+0100",
	"2012-12-24t14:30-01:00",
	"2012-12-24t14:30-0100",
	"2012-12-24t15:30:00Z",
	"2012-12-24t15:30:00z",
	"2012-12-24t16:30:00+01:00",
	"2012-12-24t16:30:00+0100",
	"2012-12-24t14:30:00-01:00",
	"2012-12-24t14:30:00-0100",
	"2012-12-24t15:30:00.123456Z",
	"2012-12-24t15:30:00.123456z",
	"2012-12-24t16:30:00.123456+01:00",
	"2012-12-24t14:30:00.123456-01:00",
	"2012-12-24 16:30 +01:00",
	"2012-12-24 14:30 -01:00",
	"2012-12-24 15:30 UTC",
	"2012-12-24 16:30 UTC+1",
	"2012-12-24 16:30 UTC+01",
	"2012-12-24 16:30 UTC+0100",
	"2012-12-24 16:30 UTC+01:00",
	"2012-12-24 14:30 UTC-1",
	"2012-12-24 14:30 UTC-01",
	"2012-12-24 14:30 UTC-01:00",
	"2012-12-24 14:30 UTC-0100",
	"2012-12-24 15:30 GMT",
	"2012-12-24 16:30 GMT+1",
	"2012-12-24 16:30 GMT+01",
	"2012-12-24 16:30 GMT+0100",
	"2012-12-24 16:30 GMT+01:00",
	"2012-12-24 14:30 GMT-1",
	"2012-12-24 14:30 GMT-01",
	"2012-12-24 14:30 GMT-01:00",
	"2012-12-24 14:30 GMT-0100",
	"2012-12-24 14:30 -01:00",
	"2012-12-24 16:30:00 +01:00",
	"2012-12-24 14:30:00 -01:00",
	"2012-12-24 16:30:00.123456 +01:00",
	"2012-12-24 14:30:00.123456 -01:00",
	"2012-12-24 15:30:00.123456 -00:00",
	"20121224T1630+01:00",
	"2012-12-24T1630+01:00",
	"20121224T16:30+01",
	"20121224T16:30 +01",
};

#define DIM(a) (sizeof(a) / sizeof(a[0]))

static void ParseTimeStamps()
{
	size_t index;
	dt_t dt_expected;
	size_t rc = dt_parse_iso_date(sample, sizeof(sample) - 1, &dt_expected);
	assert(rc > 0);

	for (index = 0; index < DIM(tests); index++) {
		dt_t dt_actual;
		rc = dt_parse_iso_date(tests[index], strlen(tests[index]), &dt_actual);
		assert(rc > 0);
		assert(dt_actual == dt_expected);
	}
}

void CDT_Parse(benchmark::State& state) {
	for (auto _ : state)
		ParseTimeStamps();
}
BENCHMARK(CDT_Parse);

static void Parse1()
{
	const char civil_string[] = "2015-02-18T10:50:31.521345123+10:00";
	dt_t dt_expected{};
	size_t rc = dt_parse_iso_date(civil_string,
				      sizeof(civil_string) - 1,
				      &dt_expected);
	assert(rc > 1);
}

void CDT_Parse1(benchmark::State& state) {
	for (auto _ : state)
		Parse1();
}
BENCHMARK(CDT_Parse1);


BENCHMARK_MAIN();
